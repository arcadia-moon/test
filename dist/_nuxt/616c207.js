(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{491:function(e){e.exports=JSON.parse('{"tactics":{"description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access."},"techniques":{"description":"Techniques represent \'how\' an adversary achieves a tactical goal by performing an action. For example, an adversary may dump credentials to achieve credential access."},"items":[{"id":"TA0001","title":"Reconnaissance","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/reconnaissance","created":"17 October 2018","updated":"19 July 2019","items":[{"id":"T0001","title":"Search Open Websites","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0002","title":"Phishing for Information","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/phishing-for-information","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0003","title":"Search Blockchain Explorer","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-blockchain-explorer","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]}]},{"id":"TA0002","title":"Initial Access","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/initial-access","created":"17 October 2018","updated":"19 July 2019","items":[{"id":"T0004","title":"Public Blockchain","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/public-blockchain","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]}]},{"id":"TA0003","title":"Execution","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/execution","created":"17 October 2018","updated":"19 July 2019","items":[{"id":"T0005","title":"Delegatecall to Untrusted Callee","description":"There exists a special variant of a message call, named delegatecall which is identical to a message call apart from the fact that the code at the target address is executed in the context of the calling contract and msg.sender and msg.value do not change their values. This allows a smart contract to dynamically load code from a different address at runtime. Storage, current address and balance still refer to the calling contract.\\n Calling into untrusted contracts is very dangerous, as the code at the target address can change any storage values of the caller and has full control over the caller\'s balance.","to":"/delegatecall","examples":[{"id":"EX0008","title":"EXAMPLE 0008","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/EX0008"}],"reference":[{"id":"1","name":"SWC-112","link":"https://swcregistry.io/docs/SWC-112/"},{"id":"2","name":"Solidity Documentation - Delegatecall / Callcode and Libraries","link":"https://docs.soliditylang.org/en/latest/introduction-to-smart-contracts.html#delegatecall-callcode-and-libraries"},{"id":"3","name":"How to Secure Your Smart Contracts: 6 Solidity Vulnerabilities and how to avoid them (Part 1) - Delegate Call","link":"https://medium.com/loom-network/how-to-secure-your-smart-contracts-6-solidity-vulnerabilities-and-how-to-avoid-them-part-1-c33048d4d17d"},{"id":"4","name":"Solidity Security: Comprehensive list of known attack vectors and common anti-patterns - Delegatecall","link":"https://blog.sigmaprime.io/solidity-security.html#delegatecall"}]},{"id":"T0006","title":"Reentrancy","description":"One of the major dangers of calling external contracts is that they can take over the control flow. In the reentrancy attack (a.k.a. recursive call attack), a malicious contract calls back into the calling contract before the first invocation of the function is finished. This may cause the different invocations of the function to interact in undesirable ways.","to":"/Reentrancy","examples":[{"id":"EX0009","title":"DAO incident","description":"The ETH DAO incident refers to a significant exploitation event in which a vulnerability in the DAO (Decentralized Autonomous Organization) smart contract on the Ethereum blockchain was manipulated, leading to the unauthorized diversion of 3.6 million Ether, raising critical discussions and reforms concerning smart contract security and blockchain governance.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-107","link":"https://swcregistry.io/docs/SWC-107/"},{"id":"2","name":"Ethereum Smart Contract Best Practices - Reentrancy","link":"https://consensys.github.io/smart-contract-best-practices/attacks/reentrancy/"},{"id":"3","name":"Decentralized Application Security Project","link":"https://www.dasp.co/#item-1"}]},{"id":"T0007","title":"Multiple calls in a single transaction","description":"Avoid combining multiple calls in a single transaction, especially when calls are executed as part of a loop. External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract. To minimize the damage caused by such failures, it is better to isolate each external call into its own transaction that can be initiated by the recipient of the call. This is especially relevant for payments, where it is better to let users withdraw funds rather than push funds to them automatically (this also reduces the chance of problems with the gas limit).","to":"/reentrancy","examples":[{"id":"EX0009","title":"EXAMPLE 0009","description":"!!! Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-113","link":"https://swcregistry.io/docs/SWC-113/"},{"id":"2","name":"Ethereum Smart Contract Best Practices - Favor pull over push for external calls","link":"https://consensys.github.io/smart-contract-best-practices/development-recommendations/general/external-calls/#favor-pull-over-push-for-external-calls"}]},{"id":"T0008","title":"untrusted transaction relayer","description":"Only allow trusted users to relay transactions. Insufficient gas griefing attacks can be performed on contracts which accept data and use it in a sub-call on another contract. If the sub-call fails, either the whole transaction is reverted, or execution is continued. In the case of a relayer contract, the user who executes the transaction, the \'forwarder\', can effectively censor transactions by using just enough gas to execute the transaction, but not enough for the sub-call to succeed.","to":"/multiple-calls-in-a-single-transaction","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-126","link":"https://swcregistry.io/docs/SWC-126/"},{"id":"2","name":"Smart Contract Security Field Guide - Griefing","link":"https://scsfg.io/hackers/griefing/"}]},{"id":"T0009","title":"incorrect transaction parameter","description":"Only allow trusted users to relay transactions. Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/untrusted-transaction-relayer","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]}]},{"id":"TA0004","title":"Privilege Escalation","subTitle":"(Access Control)","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/privilege-escalation","created":"17 October 2018","updated":"19 July 2019","items":[{"id":"T0010","title":"Default Function Visibility","description":"Functions that do not have a function visibility type specified are \\"public\\" by default. This can lead to a vulnerability if a developer forgot to set the visibility and a malicious user is able to make unauthorized or unintended state changes.","to":"/default-function-visibility","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-100","link":"https://swcregistry.io/docs/SWC-100/"},{"id":"2","name":"Smart Contract Security Field Guide - Visibility","link":"https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/visibility/"}]},{"id":"T0011","title":"Data Type Overflow","description":"An overflow/underflow happens when an arithmetic operation reaches the maximum or minimum size of a type. For instance if a number is stored in the uint8 type, it means that the number is stored in a 8 bits unsigned number ranging from 0 to 2^8-1. In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of bits – either larger than the maximum or lower than the minimum representable value.","to":"/data-type-overflow","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-101","link":"https://swcregistry.io/docs/SWC-101/"},{"id":"2","name":"Smart Contract Security Field Guide - Insecure Arithmetic","link":"https://consensys.github.io/smart-contract-best-practices/attacks/insecure-arithmetic/"}]},{"id":"T0012","title":"Reinitializing Constructor","description":"Constructors are special functions that are called only once during the contract creation. They often perform critical, privileged actions such as setting the owner of the contract. Before Solidity version 0.4.22, the only way of defining a constructor was to create a function with the same name as the contract class containing it. A function meant to become a constructor becomes a normal, callable function if its name doesn\'t exactly match the contract name. This behavior sometimes leads to security issues, in particular when smart contract code is re-used with a different name but the name of the constructor function is not changed accordingly.","to":"/reinitializing-constructor","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-118","link":"https://swcregistry.io/docs/SWC-118/"},{"id":"2","name":"SigmaPrime - Constructors with Care","link":"https://blog.sigmaprime.io/solidity-security.html#constructors"}]},{"id":"T0013","title":"Ownable","description":"The \\"onlyOwner\\" vulnerability occurs when external actors manage to execute functions within a smart contract that should be restricted exclusively to the owner, potentially leading to unauthorized access or control over the contract\'s functions and assets.","to":"/ownable","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"CVE-2018-17111, onlyOwner issues in CL token","link":"https://github.com/TEAM-C4B/CVE-LIST/tree/master/CVE-2018-17111"}]},{"id":"T0014","title":"Default State Varibale Visibility","description":"Labeling the visibility explicitly makes it easier to catch incorrect assumptions about who can access the variable. Variables can be specified as being public, internal or private. Explicitly define visibility for all state variables.","to":"/default-state-varibale-visibility","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-108","link":"https://swcregistry.io/docs/SWC-108/"},{"id":"2","name":"Ethereum Smart Contract Best Practices - Visibility","link":"https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/visibility/"}]},{"id":"T0015","title":"Uninitialized Storage Pointer","description":"Uninitialized local storage variables can point to unexpected storage locations in the contract, which can lead to intentional or unintentional vulnerabilities.","to":"/uninitialized-storage-pointer","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-109","link":"https://swcregistry.io/docs/SWC-109/"},{"id":"2","name":"SigmaPrime - Uninitialised Storage Pointers","link":"https://github.com/sigp/solidity-security-blog#unintialised-storage-pointers-1"}]},{"id":"T0017","title":"Authorization through tx.origin","description":"tx.origin is a global variable in Solidity which returns the address of the account that sent the transaction. Using the variable for authorization could make a contract vulnerable if an authorized account calls into a malicious contract. A call could be made to the vulnerable contract that passes the authorization check since tx.origin returns the original sender of the transaction which in this case is the authorized account. tx.origin should not be used for authorization. Use msg.sender instead.","to":"/authorization-through-tx-origin","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-115","link":"https://swcregistry.io/docs/SWC-115/"},{"id":"2","name":"Solidity Documentation - tx.origin","link":"https://docs.soliditylang.org/en/develop/security-considerations.html#tx-origin"},{"id":"3","name":"Ethereum Smart Contract Best Practices - Avoid using tx.origin","link":"https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/tx-origin/"}]},{"id":"T0018","title":"Arbitrary write to Storage Location","description":"A smart contract\'s data (e.g., storing the owner of the contract) is persistently stored at some storage location (i.e., a key or address) on the EVM level. The contract is responsible for ensuring that only authorized user or contract accounts may write to sensitive storage locations. If an attacker is able to write to arbitrary storage locations of a contract, the authorization checks may easily be circumvented. This can allow an attacker to corrupt the storage; for instance, by overwriting a field that stores the address of the contract owner.","to":"/arbitrary-write-to-storage-location","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-124","link":"https://swcregistry.io/docs/SWC-124/"},{"id":"2","name":"Entry to Underhanded Solidity Coding Contest 2017 (honorable mention)","link":"https://github.com/Arachnid/uscc/tree/master/submissions-2017/doughoyte"}]}]},{"id":"TA0005","title":"Defense Evasion","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","subTitle":"(condition detour)","to":"/defense-evasion","created":"17 October 2018","updated":"19 July 2019","items":[{"id":"T0011","title":"Data Type Overflow","description":"An overflow/underflow happens when an arithmetic operation reaches the maximum or minimum size of a type. For instance if a number is stored in the uint8 type, it means that the number is stored in a 8 bits unsigned number ranging from 0 to 2^8-1. In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of bits – either larger than the maximum or lower than the minimum representable value.","to":"/data-type-overflow","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-101","link":"https://swcregistry.io/docs/SWC-101/"},{"id":"2","name":"Smart Contract Security Field Guide - Insecure Arithmetic","link":"https://consensys.github.io/smart-contract-best-practices/attacks/insecure-arithmetic/"}]},{"id":"T0021","title":"blockvalue as a timestamp","description":"Contracts often need access to time values to perform certain types of functionality. Values such as block.timestamp, and block.number can give you a sense of the current time or a time delta, however, they are not safe to use for most purposes. \\nIn the case of block.timestamp, developers often attempt to use it to trigger time-dependent events. As Ethereum is decentralized, nodes can synchronize time only to some degree. Moreover, malicious miners can alter the timestamp of their blocks, especially if they can gain advantages by doing so. However, miners can\'t set a timestamp smaller than the previous one (otherwise the block will be rejected), nor can they set the timestamp too far ahead in the future. Taking all of the above into consideration, developers can\'t rely on the preciseness of the provided timestamp. \\nAs for block.number, considering the block time on Ethereum is generally about 14 seconds, it\'s possible to predict the time delta between blocks. However, block times are not constant and are subject to change for a variety of reasons, e.g. fork reorganisations and the difficulty bomb. Due to variable block times, block.number should also not be relied on for precise calculations of time.","to":"/blockvalue-as-a-timestamp","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-116","link":"https://swcregistry.io/docs/SWC-116/"},{"id":"2","name":"Ethereum Smart Contract Best Practices - Timestamp Dependence","link":"https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/timestamp-dependence/"}]},{"id":"T0022","title":"Signature Malleability","description":"The implementation of a cryptographic signature system in Ethereum contracts often assumes that the signature is unique, but signatures can be altered without the possession of the private key and still be valid. The EVM specification defines several so-called ‘precompiled’ contracts one of them being ecrecover which executes the elliptic curve public key recovery. A malicious user can slightly modify the three values v, r and s to create other valid signatures. A system that performs signature verification on contract level might be susceptible to attacks if the signature is part of the signed message hash. Valid signatures could be created by a malicious user to replay previously signed messages.","to":"/signature-malleability","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-117","link":"https://swcregistry.io/docs/SWC-117/"}]},{"id":"T0024","title":"Weak Randomness using block variables","description":"Ability to generate random numbers is very helpful in all kinds of applications. One obvious example is gambling DApps, where pseudo-random number generator is used to pick the winner. However, creating a strong enough source of randomness in Ethereum is very challenging. For example, use of block.timestamp is insecure, as a miner can choose to provide any timestamp within a few seconds and still get his block accepted by others. Use of blockhash, block.difficulty and other fields is also insecure, as they\'re controlled by the miner. If the stakes are high, the miner can mine lots of blocks in a short time by renting hardware, pick the block that has required block hash for him to win, and drop all others.","to":"/weak-randomness-using-block-variables","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-120","link":"https://swcregistry.io/docs/SWC-120/"},{"id":"2","name":"CVE-2018-17968, Bad Randomness in Ruletkalo","link":"https://github.com/TEAM-C4B/CVE-LIST/tree/master/CVE-2018-17968"}]},{"id":"T0018","title":"Arbitrary write to Storage Location","description":"A smart contract\'s data (e.g., storing the owner of the contract) is persistently stored at some storage location (i.e., a key or address) on the EVM level. The contract is responsible for ensuring that only authorized user or contract accounts may write to sensitive storage locations. If an attacker is able to write to arbitrary storage locations of a contract, the authorization checks may easily be circumvented. This can allow an attacker to corrupt the storage; for instance, by overwriting a field that stores the address of the contract owner.","to":"/arbitrary-write-to-storage-location","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-124","link":"https://swcregistry.io/docs/SWC-124/"},{"id":"2","name":"Entry to Underhanded Solidity Coding Contest 2017 (honorable mention)","link":"https://github.com/Arachnid/uscc/tree/master/submissions-2017/doughoyte"}]},{"id":"T0028","title":"Arbitrary Access with Low Level Call (mstore, assign)","description":"Solidity supports function types. That is, a variable of function type can be assigned with a reference to a function with a matching signature. The function saved to such variable can be called just like a regular function. \\nThe problem arises when a user has the ability to arbitrarily change the function type variable and thus execute random code instructions. As Solidity doesn\'t support pointer arithmetics, it\'s impossible to change such variable to an arbitrary value. However, if the developer uses assembly instructions, such as mstore or assign operator, in the worst case scenario an attacker is able to point a function type variable to any code instruction, violating required validations and required state changes.","to":"/arbitrary-access-with-low-level-call","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-127","link":"https://swcregistry.io/docs/SWC-127/"},{"id":"2","name":"Solidity CTF","link":"https://medium.com/authio/solidity-ctf-part-2-safe-execution-ad6ded20e042"}]},{"id":"T0030","title":"Improper Verification of Cryptographic Signature","description":"It is sometimes necessary to perform signature verification in smart contracts to achieve better usability or to save gas cost. A secure implementation needs to protect against Signature Replay Attacks by for example keeping track of all processed message hashes and only allowing new message hashes to be processed. A malicious user could attack a contract without such a control and get message hash that was sent by another user processed multiple times.","to":"/improper-verification-of-cryptographic-signature","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-121","link":"https://swcregistry.io/docs/SWC-121/"},{"id":"2","name":"Medium - Replay Attack Vulnerability in Ethereum Smart Contracts Introduced by transferProxy()","link":"https://medium.com/cypher-core/replay-attack-vulnerability-in-ethereum-smart-contracts-introduced-by-transferproxy-124bf3694e25"}]},{"id":"T0031","title":"insecure signature verification","description":"It is a common pattern for smart contract systems to allow users to sign messages off-chain instead of directly requesting users to do an on-chain transaction because of the flexibility and increased transferability that this provides. Smart contract systems that process signed messages have to implement their own logic to recover the authenticity from the signed messages before they process them further. A limitation for such systems is that smart contracts can not directly interact with them because they can not sign messages. Some signature verification implementations attempt to solve this problem by assuming the validity of a signed message based on other methods that do not have this limitation. An example of such a method is to rely on msg.sender and assume that if a signed message originated from the sender address then it has also been created by the sender address. This can lead to vulnerabilities especially in scenarios where proxies can be used to relay transactions.","to":"/insecure-signature-verification","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-122","link":"https://swcregistry.io/docs/SWC-122/"},{"id":"2","name":"Consensys Diligence 0x Audit Report - Insecure signature validator","link":"https://github.com/ConsenSys/0x_audit_report_2018-07-23#32-mixinsignaturevalidator-insecure-signature-validator-signaturetypecaller"}]},{"id":"T0032","title":"Hash Collisions With Multiple Variable Length Arguments","description":"Using abi.encodePacked() with multiple variable length arguments can, in certain situations, lead to a hash collision. Since abi.encodePacked() packs all elements in order regardless of whether they\'re part of an array, you can move elements between arrays and, so long as all elements are in the same order, it will return the same encoding. In a signature verification situation, an attacker could exploit this by modifying the position of elements in a previous function call to effectively bypass authorization.","to":"/hash-collisions-with-multiple-variable-length-arguments","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-133","link":"https://swcregistry.io/docs/SWC-133/"},{"id":"2","name":"Solidity Non-standard Packed Mode","link":"https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#non-standard-packed-mode"}]},{"id":"T0032","title":"Contract Detection with extcodesize","description":"Extcodesize(A) assembly function returns the size of the code at address A. If the extcodesize of address A is not 0, it is likely to be a contract address, since the contract address will contain the code area. However, when a contract is deployed in the blockchain, the blockchain first put the constructor and initialize code size as 0. So if the attacker calculate the random number in constructor, they can easily bypass a logic.","to":"/hash-collisions-with-multiple-variable-length-arguments","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"CVE-2018-17877, Greedy 599 with Bad Randomness","link":"https://github.com/TEAM-C4B/CVE-LIST/tree/master/CVE-2018-17877"}]}]},{"id":"TA0006","title":"Discovery","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/discovery","created":"17 October 2018","updated":"19 July 2019","items":[{"id":"T0033","title":"Smart Contract Private Key Discovery","description":"Tactics","to":"/smart-contract-private-key-discovery","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0034","title":"unencrypted Private Variable","description":"It is a common misconception that private type variables cannot be read. Even if your contract is not published, attackers can look at contract transactions to determine values stored in the state of the contract. For this reason, it\'s important that unencrypted private data is not stored in the contract code or state.","to":"/unencrypted-private-variable","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-136","link":"https://swcregistry.io/docs/SWC-136/"},{"id":"2","name":"CVE-2018-15552, TheEthereumLottery","link":"https://github.com/TEAM-C4B/CVE-LIST/tree/master/CVE-2018-15552"},{"id":"3","name":"Medium - Keeping secrets on Ethereum","link":"https://medium.com/solidified/keeping-secrets-on-ethereum-5b556c3bb1ee"}]},{"id":"T0036","title":"Block Variable","description":"Ability to generate random numbers is very helpful in all kinds of applications. One obvious example is gambling DApps, where pseudo-random number generator is used to pick the winner. However, creating a strong enough source of randomness in Ethereum is very challenging. For example, use of block.timestamp is insecure, as a miner can choose to provide any timestamp within a few seconds and still get his block accepted by others. Use of blockhash, block.difficulty and other fields is also insecure, as they\'re controlled by the miner. If the stakes are high, the miner can mine lots of blocks in a short time by renting hardware, pick the block that has required block hash for him to win, and drop all others.","to":"/block-variable","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-120","link":"https://swcregistry.io/docs/SWC-120/"}]}]},{"id":"TA0007","title":"Impact","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/impact","created":"17 October 2018","updated":"19 July 2019","items":[{"id":"T0037","title":"Transfer Smart Contract Balance","description":"Tactics rep","to":"/transfer-smart-contract-balance","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0038","title":"Data Destruction","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/data-destruction","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0039","title":"Storage Manipulation","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/storage-manipulation","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0040","title":"DOS revert","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/dos-revert","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0041","title":"Out of Gas Limit","description":"When smart contracts are deployed or functions inside them are called, the execution of these actions always requires a certain amount of gas, based of how much computation is needed to complete them. The Ethereum network specifies a block gas limit and the sum of all transactions included in a block can not exceed the threshold.\\nProgramming patterns that are harmless in centralized applications can lead to Denial of Service conditions in smart contracts when the cost of executing a function exceeds the block gas limit. Modifying an array of unknown size, that increases in size over time, can lead to such a Denial of Service condition.","to":"/out-of-gas-limit","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0042","title":"SELFDESTRUCT","description":"Due to missing or insufficient access controls, malicious parties can self-destruct the contract.","to":"/selfdestruct","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}],"reference":[{"id":"1","name":"SWC-106","link":"https://swcregistry.io/docs/SWC-106/"},{"id":"2","name":"Parity \\"I accidentally killed it\\" bug","link":"https://www.parity.io/blog/a-postmortem-on-the-parity-multi-sig-library-self-destruct/"}]}]},{"id":"TA0008","title":"Managing","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/managing","created":"17 October 2018","updated":"19 July 2019","items":[{"id":"T0043","title":"Mixers","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/mixers","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0044","title":"Gambling","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/gambling","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0045","title":"Atomic-Swap","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/atomic-swap","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0046","title":"Confidential Transactions (CTs)","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/confidential-transactions","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0047","title":"CoinJoin","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/coinjoin","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0048","title":"Zero-Knowledge Proofs (ZKPs)","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/zero-knowledge-proofs","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]},{"id":"T0049","title":"Stealth Addresses","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/stealth-addresses","examples":[{"id":"EX0001","title":"EXAMPLE 0001","description":"Tactics represent the \\"why\\" of an ATT&CK technique or sub-technique. It is the adversary\'s tactical goal: the reason for performing an action. For example, an adversary may want to achieve credential access.","to":"/search-open-websites"}]}]}]}')}}]);